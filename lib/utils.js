// Generated by IcedCoffeeScript 1.6.2d
(function() {
  var Utils;



  Utils = {
    median: function(vals) {
      var m, res;
      vals.sort(function(a, b) {
        return a - b;
      });
      if (vals.length % 2) {
        res = vals[(vals.length - 1) / 2];
      } else {
        m = vals.length / 2;
        res = (vals[m] + vals[m - 1]) / 2;
      }
      return res;
    },
    is_power_of_two: function(x) {
      return x > 0 && !(x & (x - 1));
    },
    dist_sq: function(v1, v2) {
      var a, d, dsq, i, _i, _len;
      dsq = 0;
      for (i = _i = 0, _len = v1.length; _i < _len; i = ++_i) {
        a = v1[i];
        d = v2[i] - a;
        dsq += d * d;
      }
      return dsq;
    },
    dist: function(v1, v2) {
      return Math.sqrt(Utils.dist_sq(v1, v2));
    },
    point_segment_dist: function(v, s) {
      var d1, d2, diff, i, l2, proj, s_len, t, x;
      l2 = Utils.dist_sq(s[0], s[1]);
      s_len = Math.sqrt(l2);
      if (l2 === 0) {
        return {
          dist: Utils.dist(v, s[0]),
          point: (function() {
            var _i, _len, _ref, _results;
            _ref = s[0];
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              x = _ref[_i];
              _results.push(x);
            }
            return _results;
          })(),
          position_on_segment: [0, 0]
        };
      } else {
        d1 = Utils.diff(v, s[0]);
        d2 = Utils.diff(s[1], s[0]);
        t = Utils.dot_product(d1, d2) / l2;
        if (t < 0) {
          return {
            dist: Utils.dist(v, s[0]),
            point: (function() {
              var _i, _len, _ref, _results;
              _ref = s[0];
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                x = _ref[_i];
                _results.push(x);
              }
              return _results;
            })(),
            position_on_segment: [0, s_len]
          };
        } else if (t > 1) {
          return {
            dist: Utils.dist(v, s[1]),
            point: (function() {
              var _i, _len, _ref, _results;
              _ref = s[1];
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                x = _ref[_i];
                _results.push(x);
              }
              return _results;
            })(),
            position_on_segment: [s_len, 0]
          };
        } else {
          diff = Utils.diff(s[1], s[0]);
          diff = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = diff.length; _i < _len; _i++) {
              x = diff[_i];
              _results.push(t * x);
            }
            return _results;
          })();
          proj = (function() {
            var _i, _len, _ref, _results;
            _ref = s[0];
            _results = [];
            for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
              x = _ref[i];
              _results.push(x + diff[i]);
            }
            return _results;
          })();
          return {
            dist: Utils.dist(v, proj),
            point: proj,
            position_on_segment: [t * s_len, (1 - t) * s_len]
          };
        }
      }
    },
    diff: function(v1, v2) {
      var i, x, _i, _len, _results;
      _results = [];
      for (i = _i = 0, _len = v1.length; _i < _len; i = ++_i) {
        x = v1[i];
        _results.push(x - v2[i]);
      }
      return _results;
    },
    dot_product: function(v1, v2) {
      var i, sum, x, _i, _len;
      sum = 0;
      for (i = _i = 0, _len = v1.length; _i < _len; i = ++_i) {
        x = v1[i];
        sum += x * v2[i];
      }
      return sum;
    }
  };

  exports.Utils = Utils;

}).call(this);
