// Generated by IcedCoffeeScript 1.6.2c
(function() {
  var BoundingBox;



  BoundingBox = (function() {
    function BoundingBox(lower_left, upper_right) {
      var n;
      this.ll = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = lower_left.length; _i < _len; _i++) {
          n = lower_left[_i];
          _results.push(n);
        }
        return _results;
      })();
      this.ur = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = upper_right.length; _i < _len; _i++) {
          n = upper_right[_i];
          _results.push(n);
        }
        return _results;
      })();
    }

    BoundingBox.prototype.contain = function(vec) {
      var dim, n, _i, _len, _results;
      _results = [];
      for (dim = _i = 0, _len = vec.length; _i < _len; dim = ++_i) {
        n = vec[dim];
        if (n < this.ll[dim]) {
          this.ll[dim] = n;
        }
        if (n > this.ur[dim]) {
          _results.push(this.ur[dim] = n);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    BoundingBox.prototype.distance_from_vec = function(vec) {
      var dim, distance, dsq, is_contained, n, nearest, v, _i, _len;
      nearest = [];
      dsq = 0;
      is_contained = true;
      for (dim = _i = 0, _len = vec.length; _i < _len; dim = ++_i) {
        n = vec[dim];
        if (n < this.ll[dim]) {
          v = this.ll[dim];
          dsq += (v - n) * (v - n);
          is_contained = false;
        } else if (n > this.ur[dim]) {
          v = this.ur[dim];
          nearest.push(v);
          dsq += (v - n) * (v - n);
          is_contained = false;
        } else {
          nearest.push(n);
        }
      }
      distance = Math.sqrt(dsq);
      return {
        distance: distance,
        nearest: nearest,
        is_contained: is_contained
      };
    };

    BoundingBox.prototype.split = function(axis, median) {
      var left, right;
      left = this.copy();
      right = this.copy();
      left.ur[axis] = median;
      right.ll[axis] = median;
      return {
        left: left,
        right: right
      };
    };

    BoundingBox.prototype.copy = function() {
      var bb, x;
      return bb = new BoundingBox((function() {
        var _i, _len, _ref, _results;
        _ref = this.ll;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          x = _ref[_i];
          _results.push(x);
        }
        return _results;
      }).call(this), (function() {
        var _i, _len, _ref, _results;
        _ref = this.ur;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          x = _ref[_i];
          _results.push(x);
        }
        return _results;
      }).call(this));
    };

    return BoundingBox;

  })();

  exports.BoundingBox = BoundingBox;

}).call(this);
